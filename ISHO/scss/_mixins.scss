@mixin respond-above($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-below($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin respond-between($lower, $upper) {
  @if map-has-key($grid-breakpoints, $lower) and map-has-key($grid-breakpoints, $upper) {
    $lower-breakpoint: map-get($grid-breakpoints, $lower);
    $upper-breakpoint: map-get($grid-breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint(s): #{$lower} and/or #{$upper}.';
  }
}

// Typography
@mixin font-size($size) {
  font-size: $size;
  line-height: $line-height-base;
}

@mixin heading-style($size: 2rem, $weight: $font-weight-bold) {
  font-family: $font-family-headings;
  font-size: $size;
  font-weight: $weight;
  line-height: $headings-line-height;
  margin-bottom: $spacer;
}

@mixin letter-spacing($value: 0.04em) {
  letter-spacing: $value;
}

// Layout
@mixin container-padding {
  padding-left: $grid-gutter-width;
  padding-right: $grid-gutter-width;
  
  @include respond-above(lg) {
    padding-left: $grid-gutter-width * 2;
    padding-right: $grid-gutter-width * 2;
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-bottom: calc(($height / $width) * 100%);
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// Visual Effects
@mixin box-shadow($shadow: $box-shadow) {
  box-shadow: $shadow;
}

@mixin transition($property: all, $duration: 0.3s, $timing: ease-in-out) {
  transition: $property $duration $timing;
}

@mixin hover-lift {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  
  &:hover,
  &:focus-visible {
    transform: translateY(-4px);
    box-shadow: $box-shadow-lg;
  }
}

@mixin card-hover {
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: $box-shadow;
  }
}

@mixin focus-visible {
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    outline: $focus-ring-width solid $focus-ring-color;
    outline-offset: 2px;
  }
}

@mixin focus-ring($color: $primary-gold-dark) {
  &:focus-visible {
    outline: 2px solid $color;
    outline-offset: 2px;
    box-shadow: 0 0 0 4px rgba($color, 0.25);
  }
}

@mixin button-reset {
  padding: 0;
  border: none;
  background: none;
  color: inherit;
  font: inherit;
  cursor: pointer;
  outline: inherit;
}

@mixin button-tag {
  padding: 0.5rem 1rem;
  border: 0.7px solid $text-dark;
  border-radius: 15px;
  background: $primary-cream;
  color: $text-dark;
  font-size: $font-size-sm;
  font-weight: $font-weight-normal;
  letter-spacing: 0.04em;
  text-decoration: none;
  white-space: nowrap;
  transition: all 0.2s ease;
  
  &:hover,
  &:focus-visible {
    background: $primary-gold;
    border-color: $text-dark;
    color: $text-dark;
  }
  
  @include focus-visible;
}

@mixin img-responsive {
  max-width: 100%;
  height: auto;
  display: block;
}

@mixin object-fit($fit: cover, $position: center) {
  object-fit: $fit;
  object-position: $position;
}

@mixin overlay($opacity: 0.5, $color: $text-dark) {
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba($color, $opacity);
    pointer-events: none;
  }
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

@mixin skip-link {
  position: absolute;
  top: -40px;
  left: 0;
  background: $primary-gold-dark;
  color: $white;
  padding: 8px;
  text-decoration: none;
  z-index: 100;
  
  &:focus {
    top: 0;
  }
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin grid-auto-fit($min-width: 250px, $gap: 1rem) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

@mixin grid-auto-fill($min-width: 250px, $gap: 1rem) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $gap;
}
